# Enter your network definition here.
# Use Shift+Enter to update the visualization.
name: "VGG_ILSVRC_16_layers"
layer {
  name: 'input-data'
  type: 'Python'
  top: 'data'
  top: 'im_info'
  top: 'gt_boxes'
  python_param {
    module: 'roi_data_layer.layer'
    layer: 'RoIDataLayer'
    param_str: "'num_classes': 2"
  }
}

layer {
  name: "conv1_1"
  type: "Convolution"
  bottom: "data"
  top: "conv1_1"
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
  convolution_param {
    num_output: 64
    pad: 1
    kernel_size: 3
  }
}
layer {
  name: "relu1_1"
  type: "ReLU"
  bottom: "conv1_1"
  top: "conv1_1"
}
layer {
  name: "conv1_2"
  type: "Convolution"
  bottom: "conv1_1"
  top: "conv1_2"
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
  convolution_param {
    num_output: 64
    pad: 1
    kernel_size: 3
  }
}
layer {
  name: "relu1_2"
  type: "ReLU"
  bottom: "conv1_2"
  top: "conv1_2"
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1_2"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv2_1"
  type: "Convolution"
  bottom: "pool1"
  top: "conv2_1"
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
  convolution_param {
    num_output: 128
    pad: 1
    kernel_size: 3
  }
}
layer {
  name: "relu2_1"
  type: "ReLU"
  bottom: "conv2_1"
  top: "conv2_1"
}
layer {
  name: "conv2_2"
  type: "Convolution"
  bottom: "conv2_1"
  top: "conv2_2"
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
  convolution_param {
    num_output: 128
    pad: 1
    kernel_size: 3
  }
}
layer {
  name: "relu2_2"
  type: "ReLU"
  bottom: "conv2_2"
  top: "conv2_2"
}
layer {
  name: "pool2"
  type: "Pooling"
  bottom: "conv2_2"
  top: "pool2"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv3_1"
  type: "Convolution"
  bottom: "pool2"
  top: "conv3_1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 256
    pad: 1
    kernel_size: 3
  }
}
layer {
  name: "relu3_1"
  type: "ReLU"
  bottom: "conv3_1"
  top: "conv3_1"
}
layer {
  name: "conv3_2"
  type: "Convolution"
  bottom: "conv3_1"
  top: "conv3_2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 256
    pad: 1
    kernel_size: 3
  }
}
layer {
  name: "relu3_2"
  type: "ReLU"
  bottom: "conv3_2"
  top: "conv3_2"
}
layer {
  name: "conv3_3"
  type: "Convolution"
  bottom: "conv3_2"
  top: "conv3_3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 256
    pad: 1
    kernel_size: 3
  }
}
layer {
  name: "relu3_3"
  type: "ReLU"
  bottom: "conv3_3"
  top: "conv3_3"
}
layer {
  name: "pool3"
  type: "Pooling"
  bottom: "conv3_3"
  top: "pool3"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv4_1"
  type: "Convolution"
  bottom: "pool3"
  top: "conv4_1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 512
    pad: 1
    kernel_size: 3
  }
}
layer {
  name: "relu4_1"
  type: "ReLU"
  bottom: "conv4_1"
  top: "conv4_1"
}
layer {
  name: "conv4_2"
  type: "Convolution"
  bottom: "conv4_1"
  top: "conv4_2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 512
    pad: 1
    kernel_size: 3
  }
}
layer {
  name: "relu4_2"
  type: "ReLU"
  bottom: "conv4_2"
  top: "conv4_2"
}
layer {
  name: "conv4_3"
  type: "Convolution"
  bottom: "conv4_2"
  top: "conv4_3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 512
    pad: 1
    kernel_size: 3
  }
}
layer {
  name: "relu4_3"
  type: "ReLU"
  bottom: "conv4_3"
  top: "conv4_3"
}


#========= RPN ============

layer {
  name: "rpn_conv4/3x3"
  type: "Convolution"
  bottom: "conv4_3"
  top: "rpn/output4"
  param { lr_mult: 1.0 }
  param { lr_mult: 2.0 }
  convolution_param {
    num_output: 512
    kernel_size: 3 pad: 1 stride: 1
    weight_filler { type: "gaussian" std: 0.01 }
    bias_filler { type: "constant" value: 0 }
  }
}
layer {
  name: "rpn_relu4/3x3"
  type: "ReLU"
  bottom: "rpn/output4"
  top: "rpn/output4"
}

layer {
  name: "rpn_cls_score_conv4"
  type: "Convolution"
  bottom: "rpn/output4"
  top: "rpn_cls_score_conv4"
  param { lr_mult: 1.0 }
  param { lr_mult: 2.0 }
  convolution_param {
    num_output: 18   # 2(bg/fg) * 9(anchors)
    kernel_size: 1 pad: 0 stride: 1
    weight_filler { type: "gaussian" std: 0.01 }
    bias_filler { type: "constant" value: 0 }
  }
}

layer {
  name: "rpn_bbox_pred_conv4"
  type: "Convolution"
  bottom: "rpn/output4"
  top: "rpn_bbox_pred_conv4"
  param { lr_mult: 1.0 }
  param { lr_mult: 2.0 }
  convolution_param {
    num_output: 36   # 4 * 9(anchors)
    kernel_size: 1 pad: 0 stride: 1
    weight_filler { type: "gaussian" std: 0.01 }
    bias_filler { type: "constant" value: 0 }
  }
}

layer {
   bottom: "rpn_cls_score_conv4"
   top: "rpn_cls_score_reshape_conv4"
   name: "rpn_cls_score_reshape_conv4"
   type: "Reshape"
   reshape_param { shape { dim: 0 dim: 2 dim: -1 dim: 0 } }
}

layer {
  name: 'rpn-data4'
  type: 'Python'
  bottom: 'rpn_cls_score_conv4'
  bottom: 'gt_boxes'
  bottom: 'im_info'
  bottom: 'data'
  top: 'rpn_labels_conv4'
  top: 'rpn_bbox_targets_conv4'
  top: 'rpn_bbox_inside_weights_conv4'
  top: 'rpn_bbox_outside_weights_conv4'
  python_param {
    module: 'rpn.anchor_target_layer'
    layer: 'AnchorTargetLayer'
    param_str: "'feat_stride': 8"
  }
}

layer {
  name: "rpn_loss_cls_conv4"
  type: "SoftmaxWithLoss"
  bottom: "rpn_cls_score_reshape_conv4"
  bottom: "rpn_labels_conv4"
  propagate_down: 1
  propagate_down: 0
  top: "rpn_cls_loss_conv4"
  loss_weight: 1
  loss_param {
    ignore_label: -1
    normalize: true
  }
}

layer {
  name: "rpn_loss_bbox_conv4"
  type: "SmoothL1Loss"
  bottom: "rpn_bbox_pred_conv4"
  bottom: "rpn_bbox_targets_conv4"
  bottom: 'rpn_bbox_inside_weights_conv4'
  bottom: 'rpn_bbox_outside_weights_conv4'
  top: "rpn_loss_bbox"
  loss_weight: 1
  smooth_l1_loss_param { sigma: 3.0 }
}

#========= RoI Proposal ============

layer {
  name: "rpn_cls_prob_conv4"
  type: "Softmax"
  bottom: "rpn_cls_score_reshape_conv4"
  top: "rpn_cls_prob_conv4"
}

layer {
  name: 'rpn_cls_prob_reshape_conv4'
  type: 'Reshape'
  bottom: 'rpn_cls_prob_conv4'
  top: 'rpn_cls_prob_reshape_conv4'
  reshape_param { shape { dim: 0 dim: 18 dim: -1 dim: 0 } }
}

layer {
  name: 'proposal_conv4'
  type: 'Python'
  bottom: 'rpn_cls_prob_reshape_conv4'
  bottom: 'rpn_bbox_pred_conv4'
  bottom: 'im_info'
  top: 'rpn_rois_conv4'
#  top: 'rpn_scores'
  python_param {
    module: 'rpn.proposal_layer'
    layer: 'ProposalLayer'
    param_str: "'feat_stride': 8"
  }
}

#layer {
#  name: 'debug-data'
#  type: 'Python'
#  bottom: 'data'
#  bottom: 'rpn_rois'
#  bottom: 'rpn_scores'
#  python_param {
#    module: 'rpn.debug_layer'
#    layer: 'RPNDebugLayer'
#  }
#}

layer {
  name: 'roi-data4'
  type: 'Python'
  bottom: 'rpn_rois_conv4'
  bottom: 'gt_boxes'
  top: 'rois_conv4'
  top: 'labels_conv4'
  top: 'bbox_targets_conv4'
  top: 'bbox_inside_weights_conv4'
  top: 'bbox_outside_weights_conv4'
  python_param {
    module: 'rpn.proposal_target_layer'
    layer: 'ProposalTargetLayer'
    param_str: "'num_classes': 2"
  }
}

#========= RCNN ============

layer {
  name: "roi_pool5_conv4"
  type: "ROIPooling"
  bottom: "conv4_3"
  bottom: "rois_conv4"
  top: "pool5_conv4"
  roi_pooling_param {
    pooled_w: 7
    pooled_h: 7
    spatial_scale: 0.125 # 1/8
  }
}
layer {
  name: "fc6_conv4"
  type: "InnerProduct"
  bottom: "pool5_conv4"
  top: "fc6_conv4"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 4096
  }
}
layer {
  name: "relu6_conv4"
  type: "ReLU"
  bottom: "fc6_conv4"
  top: "fc6_conv4"
}
layer {
  name: "drop6_conv4"
  type: "Dropout"
  bottom: "fc6_conv4"
  top: "fc6_conv4"
  dropout_param {
    dropout_ratio: 0.5
  }
}
layer {
  name: "fc7_conv4"
  type: "InnerProduct"
  bottom: "fc6_conv4"
  top: "fc7_conv4"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 4096
  }
}
layer {
  name: "relu7_conv4"
  type: "ReLU"
  bottom: "fc7_conv4"
  top: "fc7_conv4"
}
layer {
  name: "drop7_conv4"
  type: "Dropout"
  bottom: "fc7_conv4"
  top: "fc7_conv4"
  dropout_param {
    dropout_ratio: 0.5
  }
}
layer {
  name: "cls_score_conv4"
  type: "InnerProduct"
  bottom: "fc7_conv4"
  top: "cls_score_conv4"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 2
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "bbox_pred_conv4"
  type: "InnerProduct"
  bottom: "fc7_conv4"
  top: "bbox_pred_conv4"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 8
    weight_filler {
      type: "gaussian"
      std: 0.001
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "loss_cls_conv4"
  type: "SoftmaxWithLoss"
  bottom: "cls_score_conv4"
  bottom: "labels_conv4"
  propagate_down: 1
  propagate_down: 0
  top: "loss_cls_conv4"
  loss_weight: 1
}
layer {
  name: "loss_bbox_conv4"
  type: "SmoothL1Loss"
  bottom: "bbox_pred_conv4"
  bottom: "bbox_targets_conv4"
  bottom: "bbox_inside_weights_conv4"
  bottom: "bbox_outside_weights_conv4"
  top: "loss_bbox_conv4"
  loss_weight: 1
}


